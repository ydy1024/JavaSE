package com.ydy._16代理模式;

/**
    目标：学习开发出一个动态代理的对象出来，理解动态代理的执行流程。

    1.代理是什么？
        一个对象，用来对被代理对象的行为额外做一些辅助工作。
    2.实现动态代理的步骤是什么样的？
        -必须存在接口
        -被代理对象需要实现接口。
        -使用Proxy类提供的方法，的对象的代理对象。
            -public static Object newProxyInstance(ClassLoader loader,
                                                     Class<?>[] interfaces,
                                                     InvocationHandler h)
            为被代理对象返回一个代理对象。
            参数一：类加载器 加载代理类，产生代理对象。
            参数二：真实业务对象的接口。（被代理的方法交给代理对象）
            参数三：代理的核心处理程序。

    3.通过代理对象调用方法，执行流程是什么样的？
        -先走向代理。
        -代理可以为方法额外做一些辅助工作。
        -开发真正触发对象的方法的执行。
        -回到代理中，由代理负责返回结果给方法的调用者。


    a.创建一个对象（明星），对象类必须实现接口
    b.生成代理对象

    小结：
        动态代理的优点：
            -可以在不改变源码的情况下，实现对方法功能的增强，提高了代码的复用。
            -简化了编程工作，提高了开发效率，同时提高了软件系统的可扩展性。
            -可以为被代理对象的所有方法做代理。
            -非常的灵活，支持任意接口类型的实现类对象做代理，也可以直接为接口本身做代理
 */
public class Test {
    public static void main(String[] args) {
        //创建一个对象
        Star s = new Star("杨超越");
        //生成代理对象
        Skill s2 = StarAgentProxy.getProxy(s);
        s2.dance();
        s2.sing();

    }
}
